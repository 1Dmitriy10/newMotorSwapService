// ===================================================Миксины=============================================

//=========Миксин брейкпоинтов===============
@mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    }
}


//==============clamp===========================
@function clamp-px($minFont, $maxFont, $minVp: 375, $maxVp: 1584) {
    @if not unitless($minFont) or not unitless($maxFont) {
        @warn "Font arguments should be unitless";
    }

    @if not unitless($minVp) or not unitless($maxVp) {
        @warn "Viewport arguments should be unitless";
    }

    $minFont: calc($minFont / 16);
    $maxFont: calc($maxFont / 16);
    $minVp: calc($minVp / 16);
    $maxVp: calc($maxVp / 16);

    // y = mx + q
    $m: calc(($maxFont - $minFont) / ($maxVp - $minVp));
    $q: calc(-1 * $minVp * $m + $minFont);
    $m: calc($m * 100);
    // --не работает------------
    // Rounding with precision of 4
    // $m: math.div(math.round($m * 10000), 10000);
    // $q: math.div(math.round($q * 10000), 10000);
    // $minFont: math.div(math.round($minFont * 10000), 10000);
    // $maxFont: math.div(math.round($maxFont * 10000), 10000);

    @return clamp(calc($minFont * 1rem), calc($q * 1rem + calc($m * 1vw)), calc($maxFont * 1rem));
}

//============шрифты==============
@mixin font($weight, $size, $color, $height) {
    font-weight: $weight;
    font-size: $size;
    color: $color;
    line-height: $height;
}

//=======адаптивное св-во==============
@mixin adaptiveValue($property, $startSize, $minSize) {
    $addSize: $startSize - $minSize;
    // Ширина полотна макета
    $maxWidth: 1920;
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
}

// =========================================Функции=====================================================

// //перевод в rem
// @function rem($size) {
//     @return $size / 16px * 1rem;
// }

// перевод в rem
@function r($px) {
    $result: $px / 16+rem;
    @return $result;
}

//пропорциональное изменение высоты изображения
@function prop($h, $w) {
    $result: $h / $w * 100%;
    @return $result;
}

//адаптивный отступ
@function in($w, $x) {
    $result: $x * 100% / $w;
    @return $result;
}

// ============